
import os
import psycopg2
import psycopg2.extras
import tabulate
from dotenv import load_dotenv

# DO NOT EDIT THIS FILE, IT IS GENERATED BY generator.py

class H:

    def __init__(mysillyobject, cust, sum_1_quant, sum_2_quant):
        
        
        mysillyobject.cust = cust
        
        

        mysillyobject.sum_1_quant = sum_1_quant
        

        mysillyobject.sum_2_quant = sum_2_quant
        
        
    def printAllClassAttr(abc):
        attrs = vars(abc)
        for attr, value in attrs.items():
            print(f'{attr}: {value}')
    
    
def query():
    load_dotenv()

    user = os.getenv('USER')
    password = os.getenv('PASSWORD')
    dbname = os.getenv('DBNAME')

    conn = psycopg2.connect(host = 'localhost', dbname = dbname, user = user, password = password, port = 5432)
    cur = conn.cursor(cursor_factory=psycopg2.extras.DictCursor)
    cur.execute("SELECT * FROM sales")  
    
    instances = {}
    
    for row in cur:
        # Create a unique key
        attributesFormattedForKey = ""
        hInstan = {}
        for x in ['cust']:
            attributesFormattedForKey += f"{x}-{row[x]}@"
            hInstan[x] = row[x]
        attributesFormattedForKey = attributesFormattedForKey[:-1]
        #adds placeholder values in H class for aggregate functions
        for y in ['sum_1_quant', 'sum_2_quant']:
            hInstan[y] = None
        key = attributesFormattedForKey
        if key not in instances:
            instances[key] = H(**hInstan)
    cur.scroll(0, mode='absolute')
    
    for z in range(2):
        for key, h_row in instances.items():
            agg_instance = []
            split_key = key.split('@')
            split_key = [pair.split('-') for pair in split_key]
            for row in cur:
                isUsed = True
                for i in split_key:
                    if row[i[0]] != i[1]:
                        isUsed = False
                if isUsed:
                    if not(eval("row['state']=='NJ'")):
                        isUsed = False
                    if isUsed:
                        agg_instance.append(row)  
            print(agg_instance)
            # for x in ['sum_1_quant', 'sum_2_quant']: # for calculating the aggregate functions for the H-class table
            #     split_x = x.split("_")
            #     if split_x[0] == "sum" and split_x[1] == str(z) :
            #         sum = 0
            #         for l in agg_instance: 
            #             sum += getattr(l, split_x[2])
                    
            #     if split_x[0] == "count" AND split_x[1] == str(z) :
            #         count = agg_instance.length

            #     if split_x[0] == "min" AND split_x[1] == str(z) :
            #         first = True
            #         if first== True:
            #             for i in agg_instance:
            #                 if first:
            #                     min = getattr(l, split_x[2])
            #                     first = False
            #                 else:
            #                     if (l.(split_x[2]) < min):
            #                         min = getattr(l, split_x[2])

            #     if split_x[0] == "max" AND split_x[1] == str(z) :
            #         first = True
            #         if first== True:
            #             for i in agg_instance:
            #                 if first:
            #                     max = getattr(l, split_x[2])
            #                     first = False
            #                 else:
            #                     if (l.(split_x[2]) > max):
            #                         max = getattr(l, split_x[2])
                
            #     if split_x[0] == "avg" AND split_x[1] == str(z) :
            #         sum = 0
            #         count = agg_instance.length
            #         for l in agg_instance: 
            #             sum += getattr(l, split_x[2])
            #         avg = sum/count
                               
            cur.scroll(0, mode='absolute')
            None

    
    
    table_data = [vars(inst) for inst in instances.values()]
    return tabulate.tabulate(table_data, headers="keys", tablefmt="psql")

def main():
    print(query())
    
if "__main__" == __name__:
    main()
    